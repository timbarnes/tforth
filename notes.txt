Compile mode implementation
========================

Read a token
If it's a ":"
- set compile mode true
- loop
-   read the next token
-   if it's a semicolon set compile mode false and break
-   if it's a colon, error and break
-   else push it on the definition vector
- repeat
- else (we're in execution mode)
-   if it's a number, push it on the stack
-   it it's a word, execute it
- repeat

Tokenizer
=========
Main function is get_token:
- if there are tokens to return, return one
- otherwise return None

get_line:
- should be called when there are no more tokens
- reads a line, and tokenizes it
- returns false for end of file, otherwise true

other functions are internal

tokenize processes a whole line
- needs special processing for multiline strings

Main loop in program uses tokens like this:
===========================================
- Main loop checks for exit, and exits if required.
- Main loop issues a prompt, depending on the state of the compile flag
  - "Ok " or ">   "
- Main loop asks engine to process a line
  - it reads a line
  - it loops over get_token until the line of tokens is empty
  - it returns a status: false if EOF, otherwise true.